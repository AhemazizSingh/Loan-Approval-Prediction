# -*- coding: utf-8 -*-
"""app2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1paXIXV-BOGF53kmtRvh-lJPczeIDJhJ0
"""


import streamlit as st
import numpy as np
import pandas as pd
import joblib

# Load the pipeline
model = joblib.load('loan_approval_final_pipeline.pkl')

# Title
st.title("üè¶ Loan Approval Prediction App")

# Sidebar: User Inputs
st.sidebar.header("Enter Applicant Details")

# Optionally pre-fill data
if st.sidebar.button("Use Sample Data"):
    gender = 'Male'
    married = 'Yes'
    dependents = '1'
    education = 'Graduate'
    self_employed = 'No'
    applicant_income = 5000
    coapplicant_income = 1500
    loan_amount = 120
    loan_amount_term = 360
    credit_history = 'Yes'
    property_area = 'Urban'
else:
    gender = st.sidebar.selectbox("Gender", ['Male', 'Female'])
    married = st.sidebar.selectbox("Married", ['No', 'Yes'])
    dependents = st.sidebar.selectbox("Dependents", ['0', '1', '2', '3+'])
    education = st.sidebar.selectbox("Education", ['Graduate', 'Not Graduate'])
    self_employed = st.sidebar.selectbox("Self Employed", ['No', 'Yes'])
    applicant_income = st.sidebar.number_input("Applicant Income", min_value=0)
    coapplicant_income = st.sidebar.number_input("Coapplicant Income", min_value=0)
    loan_amount = st.sidebar.number_input("Loan Amount (in thousands)", min_value=0)
    loan_amount_term = st.sidebar.number_input("Loan Amount Term (months)", min_value=0)
    credit_history = st.sidebar.selectbox("Credit History", ['No', 'Yes'])
    property_area = st.sidebar.selectbox("Property Area", ['Urban', 'Semiurban', 'Rural'])

# Prepare input data
input_dict = {
    'Gender': gender,
    'Married': married,
    'Dependents': dependents,
    'Education': education,
    'Self_Employed': self_employed,
    'ApplicantIncome': applicant_income,
    'CoapplicantIncome': coapplicant_income,
    'LoanAmount': loan_amount,
    'Loan_Amount_Term': loan_amount_term,
    'Credit_History': 1.0 if credit_history == 'Yes' else 0.0,
    'Property_Area': property_area
}

input_df = pd.DataFrame([input_dict])

# Display input summary in main area
st.subheader("üìã Applicant Summary")
st.write(input_df)

# Predict
if st.button("üîç Predict Loan Approval"):
    prediction = model.predict(input_df)[0]
    proba = model.predict_proba(input_df)[0][1]

    st.subheader("üß† Model Prediction")
    st.progress(proba if prediction == 1 else 1 - proba)

    if prediction == 1:
        st.success(f"‚úÖ Loan Approved! Probability: {proba:.2%}")
    else:
        st.error(f"‚ùå Loan Rejected. Probability: {proba:.2%}")